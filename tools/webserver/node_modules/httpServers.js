// Generated by CoffeeScript 1.12.6
(function() {
  var HttpProxyServer, HttpServer, StaticServlet;

  HttpProxyServer = (function() {
    var handleRequest, httpProxy, sys;

    sys = require('util');

    httpProxy = require('http-proxy');

    function HttpProxyServer() {
      this.proxy = httpProxy.createServer(handleRequest.bind(this));
      return this;
    }

    HttpProxyServer.prototype.start = function(config1) {
      this.config = config1;
      this.proxy.listen(this.config.local_port);
      sys.puts("HttpProxy Server running at http://localhost:" + this.config.local_port + "/");
      return new HttpServer().start(this.config, true);
    };

    handleRequest = function(request, response, proxy) {
      var config, needProxy;
      needProxy = this.config.proxy_enabled && this.config.proxy_regexp.test(request.url);
      config = {
        port: needProxy ? this.config.remote_port : this.config.silent_port,
        host: needProxy ? this.config.remote_host : this.config.local_host
      };
      if (needProxy) {
        sys.puts("Proxying request from `" + request.url + "` to `http://" + config.host + ":" + config.port + request.url + "`.");
      }
      request.headers.host = config.host;
      proxy.proxyRequest(request, response, config);
    };

    return HttpProxyServer;

  })();

  HttpServer = (function() {
    var createServlet, handleRequest, http, parseURL, sys, url;

    sys = require('util');

    http = require('http');

    url = require('url');

    function HttpServer(handlers) {
      this.handlers = handlers;
      this.handlers || (this.handlers = {
        'GET': createServlet(StaticServlet),
        'HEAD': createServlet(StaticServlet),
        'POST': createServlet(StaticServlet)
      });
      this.server = http.createServer(handleRequest.bind(this));
      return this;
    }

    HttpServer.prototype.start = function(config1, silent) {
      var base;
      this.config = config1;
      if (silent == null) {
        silent = false;
      }
      (base = this.config).silent_port || (base.silent_port = Number(this.config.local_port) + 100);
      this.server.listen(this.config.silent_port);
      if (!silent) {
        sys.puts("Http Server running at http://localhost:" + this.config.silent_port + "/");
      }
    };

    createServlet = function(Class) {
      var servlet;
      servlet = new Class();
      return servlet.handleRequest.bind(servlet);
    };

    parseURL = function(target) {
      var parsed;
      parsed = url.parse(target);
      parsed.pathname = url.resolve('/', parsed.pathname);
      return url.parse(url.format(parsed), true);
    };

    handleRequest = function(req, res) {
      var handler, logEntry;
      logEntry = req.method + " " + req.url;
      if (req.headers['user-agent']) {
        logEntry += " " + req.headers['user-agent'];
      }
      sys.puts(logEntry);
      req.url = parseURL(req.url);
      handler = this.handlers[req.method];
      if (!handler) {
        res.writeHead(501);
        res.end();
        return;
      }
      return handler.call(this, req, res);
    };

    return HttpServer;

  })();

  StaticServlet = (function() {
    var MimeMap, escapeHtml, fs, sendDirectory, sendError, sendFile, sendForbidden, sendMissing, sendRedirect, sys, url, writeDirectoryList;

    function StaticServlet() {}

    sys = require('util');

    fs = require('fs');

    url = require('url');

    MimeMap = {
      'coffee': 'text/plain',
      'm3u8': 'text/plain',
      'txt': 'text/plain',
      'html': 'text/html',
      'css': 'text/css',
      'xml': 'application/xml',
      'json': 'application/json',
      'js': 'application/javascript',
      'jpg': 'image/jpeg',
      'jpeg': 'image/jpeg',
      'gif': 'image/gif',
      'png': 'image/png'
    };

    StaticServlet.prototype.handleRequest = function(req, res) {
      var parts, path;
      path = ("./" + req.url.pathname).replace('//', '/').replace(/%(..)/, function(match, hex) {
        return String.fromCharCode(parseInt(hex, 16));
      });
      parts = path.split('/');
      if (parts[parts.length - 1].charAt(0) === '.') {
        return sendForbidden(req, res, path);
      }
      return fs.stat(path, function(err, stat) {
        if (err) {
          return sendMissing(req, res, path);
        }
        if (stat.isDirectory()) {
          return sendDirectory(req, res, path);
        }
        return sendFile(req, res, path);
      });
    };

    sendFile = function(req, res, path) {
      var cType, file;
      cType = MimeMap[path.split('.').pop()];
      res.writeHead(200, {
        'Content-Type': cType || 'text/html'
      });
      if (req.method === 'HEAD') {
        res.end();
      }
      file = fs.createReadStream(path);
      file.on('data', res.write.bind(res));
      file.on('close', function() {
        return res.end();
      });
      file.on('error', function(error) {
        return sendError(req, res, error);
      });
    };

    sendDirectory = function(req, res, path) {
      var redirectUrl;
      if (path.match(/[^\/]$/)) {
        req.url.pathname += '/';
        redirectUrl = url.format(url.parse(url.format(req.url)));
        return sendRedirect(req, res, redirectUrl);
      }
      return fs.readdir(path, (function(_this) {
        return function(err, files) {
          var numFiles;
          if (err) {
            return sendError(req, res, error);
          }
          if (!files.length) {
            return writeDirectoryList(req, rees, path, []);
          }
          numFiles = files.length;
          return files.forEach(function(fileName, index) {
            return fs.stat(path, function(err, stat) {
              if (err) {
                return sendMissing(req, res, path);
              }
              if (stat.isDirectory()) {
                files[index] = fileName + '/';
              }
              if (!(--numFiles)) {
                return writeDirectoryList(req, res, path, files);
              }
            });
          });
        };
      })(this));
    };

    sendError = function(req, res, path) {
      var content;
      content = "<!DOCTYPE html>\n<html>\n  <head>\n  <title>Internal Server Error</title>\n  </head>\n  <body>\n	<h1>Internal Server Error</h1>\n	<pre>" + (escapeHtml(sys.inspect(error))) + "#</pre>\n  </body>\n</html>";
      res.writeHead(500, {
        'Content-Type': 'text/html'
      });
      res.write(content);
      res.end();
      sys.puts('500 Internal Server Error');
      sys.puts(sys.inspect(error));
    };

    sendMissing = function(req, res, path) {
      var content;
      content = "<!DOCTYPE html>\n<html>\n  <head>\n  <title>404 Not Found</title>\n  </head>\n  <body>\n	<h1>Missing / Not Found</h1>\n	<p>\n	   The requested URL `" + (escapeHtml(path.substring(1))) + "`\n	   was not found on this server.\n	</p>\n  </body>\n</html>";
      res.writeHead(404, {
        'Content-Type': 'text/html'
      });
      res.write(content);
      res.end();
      sys.puts("404 Not Found: " + path);
    };

    sendForbidden = function(req, res, path) {
      var content;
      content = "<!DOCTYPE html>\n<html>\n  <head>\n  <title>403 Forbidden</title>\n  </head>\n  <body>\n	<h1>Forbidden/h1>\n	<p>\n	   You do not have permission to access\n	   `" + (escapeHtml(path.substring(1))) + "`\n	   on this server.\n	</p>\n  </body>\n</html>";
      res.writeHead(403, {
        'Content-Type': 'text/html'
      });
      res.write(content);
      res.end();
      sys.puts("403 Forbidden: " + path);
    };

    sendRedirect = function(req, res, redirectUrl) {
      var content;
      content = "<!DOCTYPE html>\n<html>\n  <head>\n  <title>301 Moved Permanently</title>\n  </head>\n  <body>\n	<h1>Moved Permanently/h1>\n	<p>\n	   The document has moved to <a href='" + redirectUrl + "'> here </a>\n	</p>\n  </body>\n</html>";
      res.writeHead(301, {
        'Content-Type': 'text/html',
        'Location': redirectUrl
      });
      res.write(content);
      res.end();
      sys.puts("301 Moved Permanently: " + redirectUrl);
    };

    writeDirectoryList = function(req, res, path, files) {
      var content, rows;
      res.writeHead(200, {
        'Content-Type': 'text/html'
      });
      if (req.method === 'HEAD') {
        return res.end();
      }
      rows = "";
      files.forEach(function(name) {
        if (name.charAt(0) !== '.') {
          if (name.charAt(name.length - 1) === '/') {
            name = name.substring(0, name.length - 1);
          }
        }
        return rows += "<li><a href=\"" + name + "\">" + name + "</a></li>";
      });
      content = "<!DOCTYPE html>\n<html>\n  <head>\n	  <title>\"" + (escapeHtml(path)) + "\"</title>\n	  <style>\n	  	ol {\n	  		list-style-type: none;\n	  		font-size      : 1.2em;\n	  	}\n	  </style>\n  </head>\n  <body>\n	<h1>Directory: " + (escapeHtml(path)) + "</h1>\n	<ol>\n		" + rows + "\n	</ol>\n  </body>\n</html>";
      res.write(content);
      res.end();
    };

    escapeHtml = function(value) {
      return value.toString().replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;');
    };

    return StaticServlet;

  })();

  exports.StaticServlet = StaticServlet;

  exports.HttpServer = HttpServer;

  exports.HttpProxyServer = HttpProxyServer;

}).call(this);
